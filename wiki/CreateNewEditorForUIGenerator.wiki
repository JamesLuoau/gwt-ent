#summary How to extend new editor for ui generator
#labels Featured,Phase-Implementation

TODO

= How to create new editor =

= Create a date editor using gwtext's datepick =
=== 1  Create new class DateEditor ===
  Create new class DateEditor extends from AbstractEditor or just implements Editor, but extends from AbstractEditor will save your time.
  GWT now can't dynamic create class, as a supplement, we provide a creator interface to create new Editor.
  The blank class will looks like this:
{{{
package com.gwtent.client.ui.editors;

import com.google.gwt.user.client.ui.Widget;
import com.gwtent.client.ui.editor.AbstractEditor;
import com.gwtent.client.ui.model.Value;

public class DateEditor extends AbstractEditor {
	public static class DateEditorCreator implements EditorCreator{

		public Editor createEditor(Value value) {
			return new DateEditor(value);
		}
		
	}

	public DateEditor(Value value) {
		super(value);
	}

	public Object getValueFromWidget() {
		// TODO Auto-generated method stub
		return null;
	}

	public Widget getWidget() {
		// TODO Auto-generated method stub
		return null;
	}

}
}}}

=== 2  Add function code ===
  * In contructor, create and setup real editor
  * Complete abstract functions
  * Add events to editor and process validate

  * The code will looks like this:
{{{
public class DateEditor extends AbstractEditor {

	public static class DateEditorCreator implements EditorCreator {

		public Editor createEditor(Value value) {
			return new DateEditor(value);
		}
	}

	private DatePicker datePicker;

	public DateEditor(Value value) {
		super(value);

		datePicker = new DatePicker(new DatePickerConfig() {
			// your DatePickerConfig
		});

		if (value.getValue() != null)
			datePicker.setValue((Date) value.getValue());
		datePicker.setDisabled(this.getValue().getReadOnly());
		datePicker.addDatePickerListener(new DatePickerListenerImpl());
	}

	public Object getValueFromWidget() {
		return datePicker.getValue();
	}

	public Widget getWidget() {
		return datePicker;
	}

	class DatePickerListenerImpl implements DatePickerListener {

		public void onSelect(DatePicker dataPicker, Date date) {
			doValidate();
		}

	}

}
}}}

=== 3  Register this editor ===
  In class *UIFactory*, this is a fasade class for ui generator system, there is a function named *registerValueTypesAndEditor*, you can create new class inherited from UIFactory and override registerValueTypesAndEditor function, at here, we just put the fllowing sentence:
{{{
ValueEditorRegister.getInstance().register("java.util.Date", new ValueDefaultImpl.ValueDefaultImplCreator(), new DateEditor.DateEditorCreator());
}}}

=== 4  Everything has done, Just test ===
  In our domain class Team, we add two fields: "registerDate" ""


= Create a complex Editor =