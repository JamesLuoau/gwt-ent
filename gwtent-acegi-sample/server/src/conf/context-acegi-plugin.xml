<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- we cann't use redirect filter for example: authenticationProcessingFilter logoutFilter-->
	<!-- we use Security(the fllowing one) insteed -->
	<bean id="filterChainProxy"
		class="org.springframework.security.util.FilterChainProxy">
		<property name="filterInvocationDefinitionSource">
			<value>
				CONVERT_URL_TO_UPPERCASE_BEFORE_COMPARISON
				PATTERN_TYPE_APACHE_ANT
				<!--  
				/**=channelProcessingFilter,httpSessionContextIntegrationFilter,authenticationProcessingFilter,logoutFilter,rememberMeProcessingFilter,anonymousProcessingFilter,exceptionTranslationFilter,concurrentSessionFilter,filterSecurityInterceptor
				-->
				/**=httpSessionContextIntegrationFilter,rememberMeProcessingFilter,anonymousProcessingFilter,exceptionTranslationFilter,concurrentSessionFilter,filterSecurityInterceptor
			</value>
		</property>
	</bean>

	<!-- our security implement, used for gwt rpc service -->
	<bean id="security" class="com.gwtent.acegi.SecurityAcegiImpl">
		<property name="authenticationManager"
			ref="authenticationManager" />
		<property name="rememberMeServices" ref="rememberMeServices" />
		<property name="logoutHandlers">
			<list>
				<ref bean="rememberMeServices" />
			</list>
		</property>
	</bean>

	<!--
		capability with httpSessionContextIntegrationFilter
	-->
	<bean id="httpSessionContextIntegrationFilter"
		class="org.springframework.security.context.HttpSessionContextIntegrationFilter" />

	<bean id="authenticationProcessingFilter"
		class="com.gwtent.acegi.RPCAuthenticationProcessingFilter">
		<property name="authenticationManager"
			ref="authenticationManager" />
		<property name="authenticationFailureUrl"
			value="/index.jsp?login_error=1" />
		<property name="defaultTargetUrl" value="/main.jsp" />
		<property name="filterProcessesUrl"
			value="/j_acegi_security_check" />
		<property name="rememberMeServices" ref="rememberMeServices" />
	</bean>
	
	<bean id="rpcAuthenticationProcessingFilter"
		class="com.gwtent.acegi.RPCAuthenticationProcessingFilter">
		<property name="authenticationManager"
			ref="authenticationManager" />
		<property name="authenticationFailureUrl"
			value="/index.jsp?login_error=1" />
		<property name="defaultTargetUrl" value="/main.jsp" />
		<property name="filterProcessesUrl"
			value="/userLogin.rpc" />
		<property name="rememberMeServices" ref="rememberMeServices" />
	</bean>


	<bean id="authenticationManager"
		class="org.springframework.security.providers.ProviderManager">
		<property name="providers">
			<list>
				<ref local="daoAuthenticationProvider" />
				<bean
					class="org.springframework.security.providers.rememberme.RememberMeAuthenticationProvider">
					<property name="key" value="coceler" />
				</bean>
				<ref local="anonymousAuthenticationProvider" />
			</list>
		</property>
		<!-- <property name="sessionController" ref="concurrentSessionController"/>
		-->
	</bean>

	<bean id="daoAuthenticationProvider"
		class="org.springframework.security.providers.dao.DaoAuthenticationProvider">
		<property name="userDetailsService" ref="userDetailsService" />
	</bean>



	<bean id="rememberMeProcessingFilter"
		class="org.springframework.security.ui.rememberme.RememberMeProcessingFilter">
		<property name="authenticationManager"
			ref="authenticationManager" />
		<property name="rememberMeServices" ref="rememberMeServices" />
	</bean>


	<bean id="rememberMeServices"
		class="org.springframework.security.ui.rememberme.TokenBasedRememberMeServices">
		<property name="userDetailsService" ref="userDetailsService" />
		<property name="tokenValiditySeconds" value="2592000" />
		<property name="key" value="coceler" />
	</bean>


	<!-- capability with anonymousProcessingFilter -->
	<bean id="anonymousProcessingFilter"
		class="org.springframework.security.providers.anonymous.AnonymousProcessingFilter">
		<property name="key" value="anonymousUser" />
		<property name="userAttribute"
			value="ANONYMOUSUSER,PRIV_ANONYMOUS" />
	</bean>
	<bean id="anonymousAuthenticationProvider"
		class="org.springframework.security.providers.anonymous.AnonymousAuthenticationProvider">
		<property name="key" value="anonymousUser" />
	</bean>


	<bean id="userDetailsService"
		class="org.springframework.security.userdetails.memory.InMemoryDaoImpl">
		<property name="userMap">  
        <value>  
            admin=admin,ROLE_ADMIN   
            user=user,ROLE_USER   
            guest=guest,disabled,ROLE_GUEST   
         </value>  
     	</property>
	</bean>

	<!-- 
		Md5PasswordEncoder 
		ShaPasswordEncoder
		As SHA is a one-way hash, the salt can contain any characters. The default 
		strength for the SHA encoding is SHA-1. If you wish to use higher strengths use 
		the argumented constructor. ShaPasswordEncoder(int strength) 
		The applicationContext example... 	
		<bean id="passwordEncoder" class="org.springframework.security.providers.encoding.ShaPasswordEncoder">
		<constructor-arg value="256"/>
		</bean>
	-->
	<bean id="passwordEncoder"
		class="org.springframework.security.providers.encoding.PlaintextPasswordEncoder" />
		

	<bean id="logoutFilter"
		class="org.springframework.security.ui.logout.LogoutFilter">
		<constructor-arg value="/index.jsp" />
		<constructor-arg>
			<list>
				<ref bean="rememberMeServices" />
				<bean
					class="org.springframework.security.ui.logout.SecurityContextLogoutHandler" />
			</list>
		</constructor-arg>
		<property name="filterProcessesUrl" value="/j_acegi_logout" />
	</bean>


	<bean id="concurrentSessionFilter"
		class="org.springframework.security.concurrent.ConcurrentSessionFilter">
		<property name="sessionRegistry" ref="sessionRegistry" />
		<property name="expiredUrl" value="/index.jsp" />
	</bean>

	<bean id="concurrentSessionController"
		class="org.springframework.security.concurrent.ConcurrentSessionControllerImpl">
		<property name="maximumSessions">
			<value>1</value>
		</property>
		<property name="sessionRegistry" ref="sessionRegistry" />
	</bean>
	<bean id="sessionRegistry"
		class="org.springframework.security.concurrent.SessionRegistryImpl" />






	<!-- AuthenticationEvent Listener -->
	<bean id="loggerListener"
		class="org.springframework.security.event.authentication.LoggerListener" />


	<!-- process AccessDeniedException, AuthenticationException  -->
	<bean id="exceptionTranslationFilter"
		class="org.springframework.security.ui.ExceptionTranslationFilter">
		<property name="authenticationEntryPoint">
			<ref local="authenticationProcessingFilterEntryPoint" />
		</property>
		<property name="accessDeniedHandler">
			<bean
				class="org.springframework.security.ui.AccessDeniedHandlerImpl">
				<property name="errorPage" value="/error.jsp" />
			</bean>
		</property>
	</bean>


	<!-- 当AccessDeniedException且存在anonymous user时触发 -->
	<bean id="authenticationProcessingFilterEntryPoint"
		class="org.springframework.security.ui.webapp.AuthenticationProcessingFilterEntryPoint">
		<property name="loginFormUrl">
			<value>/index.jsp</value>
		</property>
		<property name="forceHttps" value="false" />
	</bean>

	<!--
		filterSecurityInterceptor在执行转向url前检查objectDefinitionSource中设定的用户权限信息
		过程：
		首先，objectDefinitionSource中定义了访问URL需要的属性信息(这里的属性信息仅仅是标志，告诉accessDecisionManager要用哪些voter来投票)
		然后，authenticationManager调用自己的provider来对用户的认证信息进行校验。
		最后，有投票者根据用户持有认证和访问url需要的属性，调用自己的voter来投票，决定是否允许访问。
	-->
	<bean id="filterSecurityInterceptor"
		class="org.springframework.security.intercept.web.FilterSecurityInterceptor">
		<property name="authenticationManager"
			ref="authenticationManager" />
		<property name="accessDecisionManager"
			ref="accessDecisionManager" />
		<property name="objectDefinitionSource">
			<value>
				CONVERT_URL_TO_UPPERCASE_BEFORE_COMPARISON
				PATTERN_TYPE_APACHE_ANT

				/updateForum.jsp=PRIV_1 /hello_1.jsp=PRIV_2
				/**=PRIV_ANONYMOUS,PRIV_COMMON,PRIV_1,PRIV_2
			</value>
		</property>
	</bean>


	<bean id="accessDecisionManager"
		class="org.springframework.security.vote.AffirmativeBased">
		<property name="allowIfAllAbstainDecisions" value="true" />
		<property name="decisionVoters">
			<list>
				<ref bean="roleVoter" />
			</list>
		</property>
	</bean>
	<bean id="roleVoter" class="org.springframework.security.vote.RoleVoter">
		<property name="rolePrefix" value="PRIV_" />
	</bean>


	<!--
	<bean id="methodSecurityInterceptor"
		class="org.springframework.security.intercept.method.aopalliance.MethodSecurityInterceptor">
		<property name="authenticationManager"
			ref="authenticationManager" />
		<property name="accessDecisionManager"
			ref="accessDecisionManager" />
		<property name="objectDefinitionSource">
			<value>
				 com.coceler.service.BbtForum.updateForum=PRIV_2 
			</value>
		</property>
	</bean>
	<bean id="bbtForum"
		class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="interceptorNames">
			<list>
				<idref bean="methodSecurityInterceptor" />
			</list>
		</property>
		<property name="proxyTargetClass" value="true" />
		<property name="target" ref="bbtForumTarget" />
	</bean>
	<bean id="bbtForumTarget" class="com.coceler.service.BbtForum" />
	
	-->

	<!-- 方法拦截器 
		<bean id="methodSecurityInterceptor"
		class="org.springframework.security.intercept.method.aopalliance.MethodSecurityInterceptor">
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="accessDecisionManager" ref="accessDecisionManager" />
		<property name="objectDefinitionSource" ref="objectDefinitionSource" /> 
		<property name="objectDefinitionSource">
		<value>
		com.coceler.service.BbtForum.updateForum=PRIV_2
		</value>
		</property>
		</bean>-->


	<!-- 通过注解来增加方法拦截器,在方法前类似于: @Secured({"PRIV_2"}) -->
	<!-- 
		<bean id="objectDefinitionSource"
		class="org.springframework.security.intercept.method.MethodDefinitionAttributes">
		<property name="attributes">
		<bean class="org.springframework.security.annotation.SecurityAnnotationAttributes" />
		</property>
		</bean>
	-->
	<!-- 
		<bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="interceptorNames">
		<list>
		<value>methodSecurityInterceptor</value>
		</list>
		</property>
		<property name="beanNames">
		<list>
		<value>bbtForum</value>
		</list>
		</property>
		</bean>
		
		
		<bean id="bbtForum" class="com.coceler.service.BbtForum" />
	-->

	<!-- EhCache Manager 
	<bean id="cacheManager"
		class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation">
			<value>classpath:conf/ehcache.xml</value>
		</property>
	</bean>
	
	-->

	<!-- HTTPS安全通道 -->
	<bean id="channelProcessingFilter"
		class="org.springframework.security.securechannel.ChannelProcessingFilter">
		<property name="channelDecisionManager"
			ref="channelDecisionManager" />
		<property name="filterInvocationDefinitionSource">
			<value>
				CONVERT_URL_TO_UPPERCASE_BEFORE_COMPARISON
				\A/index.jsp.*\Z=REQUIRES_SECURE_CHANNEL
				\A/j_acegi_security_check.*\Z=REQUIRES_SECURE_CHANNEL
				\A.*\Z=REQUIRES_INSECURE_CHANNEL
			</value>
		</property>
	</bean>
	<bean id="channelDecisionManager"
		class="org.springframework.security.securechannel.ChannelDecisionManagerImpl">
		<property name="channelProcessors">
			<list>
				<bean
					class="org.springframework.security.securechannel.SecureChannelProcessor" />
				<bean
					class="org.springframework.security.securechannel.InsecureChannelProcessor" />
			</list>
		</property>
	</bean>

	<!--<bean class="com.coceler.service.LoginSuccessListener" /> -->
</beans>
